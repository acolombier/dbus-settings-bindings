// SPDX-License-Identifier: MPL-2.0
//! # DBus interface proxy for: `org.freedesktop.NetworkManager.AccessPoint`
//!
//! This code was generated by `zbus-xmlgen` `2.0.0` from DBus introspection data.
//! Source: `Interface '/org/freedesktop/NetworkManager/AccessPoint/383' from service 'org.freedesktop.NetworkManager' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
	interface = "org.freedesktop.NetworkManager.AccessPoint",
	default_service = "org.freedesktop.NetworkManager"
)]
trait AccessPoint {
	/// Flags property
	#[dbus_proxy(property)]
	fn flags(&self) -> zbus::Result<u32>;

	/// Frequency property
	#[dbus_proxy(property)]
	fn frequency(&self) -> zbus::Result<u32>;

	/// HwAddress property
	#[dbus_proxy(property)]
	fn hw_address(&self) -> zbus::Result<String>;

	/// LastSeen property
	#[dbus_proxy(property)]
	fn last_seen(&self) -> zbus::Result<i32>;

	/// MaxBitrate property
	#[dbus_proxy(property)]
	fn max_bitrate(&self) -> zbus::Result<u32>;

	/// Mode property
	#[dbus_proxy(property)]
	fn mode(&self) -> zbus::Result<u32>;

	/// RsnFlags property
	#[dbus_proxy(property)]
	fn rsn_flags(&self) -> zbus::Result<u32>;

	/// Ssid property
	#[dbus_proxy(property)]
	fn ssid(&self) -> zbus::Result<Vec<u8>>;

	/// Strength property
	#[dbus_proxy(property)]
	fn strength(&self) -> zbus::Result<u8>;

	/// WpaFlags property
	#[dbus_proxy(property)]
	fn wpa_flags(&self) -> zbus::Result<u32>;
}
